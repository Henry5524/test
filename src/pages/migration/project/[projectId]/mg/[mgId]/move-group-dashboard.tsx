import { CalculationError, DataPanelGroup, InformationTooltip, Message, Page, VcioIcon } from '@components';
import { DataPanelColumn } from '@components/controls/DataPanelColumn';
import { Box, CircularProgress, Divider, Grid, Menu, MenuItem, Typography } from '@material-ui/core';
import { downloadAndParseAndConvertToResults, useProject, useProjects } from '@services';
import { colors, theme } from '@styles';
import { InventoryType, mgTotalComputeInstances, summarizeCustomProperties } from '@utils';
import { Column, ColumnApi, GridApi, GridOptions, GridReadyEvent } from 'ag-grid-community';
import _ from 'lodash';
import { useRouter } from 'next/router';
import React, { MouseEvent, useCallback, useMemo, useState } from 'react';
import useSWR from 'swr';
import { CalcStatus, commonProjectStyles, getProjectStatus, getXref, ProjectViewType } from '../../../../../../utils/common-project';

/**
 * Dashboard for individual move group (aka Inventory Summary tab)
 * @constructor
 */
export default function MoveGroupDashboard() {
    const classes = commonProjectStyles();
    const { query: { projectId, mgId } } = useRouter();
    const { data: project, error } = useProject(projectId as string);
    const { data: projects } = useProjects();
    const { data: overviewData } = useSWR(project?.roProjectWithData ? `overview_${projectId}` : null,
        // @ts-ignore
        () => getXref(project?.roProjectWithData, 'overview'));
    const { data: mgData } = useSWR(project?.roProjectWithData ? `movegroup_${projectId}` : null,
        // @ts-ignore
        () => getXref(project?.roProjectWithData, 'mg'));
    const { data: remoteData } = useSWR(mgData ? `mgDashboard_${projectId}_${mgId}` : null,
        () => {
            if (mgData && mgData['entity_MoveGroup_info.csv']) {
                return downloadAndParseAndConvertToResults(mgData['entity_MoveGroup_info.csv']);
            }
            return new Promise<{
                columnDefs: DataPanelColumn[];
                rows: object[];
            }>((resolve, _reject) => {
                resolve({
                    columnDefs: [],
                    rows: []
                });
            });
        });
    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
    const [currentMode, setCurrentMode] = useState<{
        id: string;
        displayName: string;
    }>({
        id: 'App',
        displayName: 'Application'
    });
    const [gridApi, setGridApi] = useState<{
        api: GridApi;
        columnApi: ColumnApi;
    }>();

    // Filter rows to show only this move group's data
    const rows: object[] = useMemo(() => {
        if (!remoteData) {
            return [];
        }
        const column = _.find(remoteData.columnDefs, { 'headerName': 'MoveGroup' });
        if (column?.field) {
            return _.filter(remoteData.rows, (row: any) => {
                // @ts-ignore
                return row[column.field] === project.roProjectWithData.moveGroupMap[mgId as string].name;
            });
        }
        return [];
    }, [remoteData, mgId, project]);

    // Default column options.  Disable agGrid column menu enable row group option, grouping is controlled by menu dropdown.
    const agGridOptions: GridOptions = useMemo(() => {
        return {
            defaultColDef: {
                enableRowGroup: false
            }
        };
    }, []);

    // Group by the requested column
    const setGrouping = useCallback((targetGroup: string, columnApi: ColumnApi) => {
        if (columnApi) {
            const groupColumn: Column | undefined = _.find(columnApi.getAllGridColumns(), gridColumn => {
                const UserColDef = gridColumn.getUserProvidedColDef();
                // UserColDef may be null if it is a grouped column (e.g. autogenerated), for instance
                return UserColDef !== null && UserColDef.headerName === targetGroup;
            });
            if (groupColumn) {
                columnApi.setRowGroupColumns([groupColumn.getColId()]);
            }
        }
    }, []);

    // Drop down menu handler
    const onMenuClick = useCallback((event: MouseEvent<HTMLElement>) => {
        setAnchorEl(null);
        const mode = event.currentTarget.id || InventoryType.Device;
        setCurrentMode({
            id: mode,
            displayName: mode === 'App' ? 'Application' : mode
        });
        // @ts-ignore
        setGrouping(event.currentTarget.id || 'App', gridApi.columnApi);
    }, [gridApi, setGrouping]);
    const onMenuOpen = useCallback((event: MouseEvent<HTMLButtonElement>) => {
        setAnchorEl(event.currentTarget);
    }, []);
    const onMenuClose = useCallback(() => {
        setAnchorEl(null);
    }, []);

    const customPropsSummary = useMemo(() => {
        if (!project) {
            return [];
        }
        return summarizeCustomProperties(project, mgId as string);
    }, [project, mgId]);

    const MOVE_GROUP_CONTENTS = useMemo(() => {
        if (!project) {
            return (
                <></>
            );
        }
        return (
            <>
                <Box border={1} className={classes.cardWrapper} padding="24px 32px 24px 32px">
                    <Box className={classes.subText} mb={theme.spacing(1)}>
                        Move Group Elements According to the Inventory
                        <InformationTooltip>
                            Use to:
                            <ul>
                                <li>Verify items in the move group</li>
                            </ul>
                        </InformationTooltip>
                    </Box>
                    <Grid container justify="center" alignItems="center" direction="row">
                        <Box style={{ fontSize: '20px', verticalAlign: 'middle' }}>
                            <VcioIcon vcio="migration-application" iconColor={colors.blue_500} rem={1.5} width={40} mr={10}/>
                            <Box component="span" mr={theme.spacing(0.5)} data-cy="numberOfApp">
                                {project.roProjectWithData.moveGroupMap[mgId as string].group_ids.length}
                            </Box>
                            Application{project.roProjectWithData.moveGroupMap[mgId as string].group_ids.length === 1 ? '' : 's'}
                        </Box>
                        {
                            customPropsSummary && _.keys(customPropsSummary).length > 0 &&
                            <>
                                <Divider key="divider" orientation="vertical" flexItem style={{ marginRight: '40px', marginLeft: '40px' }}/>
                                <VcioIcon vcio="general-tags-outline" iconColor={colors.blue_500} rem={1.5} width={40} mr={10}/>
                                <Box style={{ fontSize: '20px', verticalAlign: 'middle' }}>
                                    {
                                        _.toPairs(customPropsSummary).map((value) => {
                                            return (
                                                <>
                                                    {value[1].length} {_.find(_.union(project.roProjectWithData.custom_node_props, project.roProjectWithData.custom_app_props), { name: value[0] })?.title}{value[1].length === 1 ? '' : 's'}
                                                    <br/>
                                                </>
                                            );
                                        })
                                    }
                                </Box>
                            </>
                        }
                        <Divider key="divider" orientation="vertical" flexItem style={{ marginRight: '40px', marginLeft: '40px' }}/>
                        <Box style={{ fontSize: '20px', verticalAlign: 'middle' }}>
                            <VcioIcon vcio="migration-device" iconColor={colors.blue_500} rem={1.5} width={40} mr={10}/>
                            <Box component="span" mr={theme.spacing(0.5)} data-cy="numberOfDevices">
                                {project.roProjectWithData.moveGroupMap[mgId as string].node_ids.length}
                            </Box>
                            Individual Compute Instance{project.roProjectWithData.moveGroupMap[mgId as string].node_ids.length === 1 ? '' : 's'}
                        </Box>
                    </Grid>
                    <Grid container justify="center" alignItems="center" direction="row">
                        <Box mt={4}>
                            Total Compute Instances in the Move Group:
                            <VcioIcon vcio="migration-device" iconColor={colors.blue_500} ml={2} mr={1} data-cy="totalDevicesInMoveGroup"/>
                            {project.roProjectWithData.moveGroupMap ? mgTotalComputeInstances(project, mgId as string) : 0}
                        </Box>
                    </Grid>
                </Box>
            </>
        );
    }, [project, classes, customPropsSummary, mgId]);

    const MENU_ITEMS = useMemo(() => {
        if (!project) {
            return (
                <></>
            );
        }
        return (
            <div>
                <MenuItem
                    id='App'
                    key='App'
                    className={classes.menuItem}
                    onClick={onMenuClick}
                >
                    <Box className={classes.menuItemText}>Application</Box>
                </MenuItem>
                {
                    _.values(_.sortBy(_.union(project.roProjectWithData.custom_node_props, project.roProjectWithData.custom_app_props), (value: any) => value.title)).map((value: any) => {
                        return (
                            <MenuItem
                                id={value.title}
                                key={value.title}
                                className={classes.menuItem}
                                onClick={onMenuClick}
                            >
                                <Box className={classes.menuItemText}>{value.title}</Box>
                            </MenuItem>
                        );
                    })
                }
            </div>
        );
    }, [project, onMenuClick, classes]);

    const onGridReady = useCallback((event: GridReadyEvent) => {
        setGridApi({
            api: event.api,
            columnApi: event.columnApi
        });
        // Set default grid grouping
        setGrouping(currentMode.id, event.columnApi);
    }, [currentMode, setGrouping]);

    if (!project || !projects || !mgData || !remoteData || !project.roProjectWithData.moveGroupMap) {
        const menu = {
            tab_name: 'migration',
            nodes: [],
        };
        return (
            <Page tab="migration" navMenu={menu}>
                <CircularProgress/>
            </Page>
        );
    }
    if (error) {
        return (
            <Grid
                container
                direction="row"
                justify="center"
                alignItems="center"
                style={{ marginTop: 40 }}
            >
                <Message warning={true}>{error?.message ?? 'Unknown Error'}</Message>
            </Grid>
        );
    }

    if (getProjectStatus(project.roProjectWithData.results, ProjectViewType.MoveGroup) === CalcStatus.Error) {
        return (
            <CalculationError
                type={ProjectViewType.MoveGroup}
                msg="Move groups were calculated with errors"
                projectName={project.roProjectWithData.name}
            />
        );
    }

    return (
        <>
            <Grid container direction="column" spacing={10}>
                <Grid item xs={12}>
                    <Box mt={theme.spacing(1)} mb={theme.spacing(1)}>
                        <Typography className={classes.headers}>Move Group Contents</Typography>
                    </Box>
                    {
                        MOVE_GROUP_CONTENTS
                    }
                </Grid>
                <Grid item xs={12}>
                    <Grid container direction="column">
                        <Grid container direction="row" alignItems="center" className={classes.headers}>
                            <Box onClick={onMenuOpen}>
                                Compute Instances&nbsp;
                                <Box
                                    className={classes.linkButton}
                                    style={{ borderBottom: '2px dotted', textDecoration: 'none', color: colors.green_600 }}
                                >
                                    by&nbsp;{currentMode.displayName}
                                </Box>
                            </Box>
                            <Menu
                                anchorEl={anchorEl}
                                keepMounted
                                className={classes.dropdown}
                                open={Boolean(anchorEl)}
                                onClose={onMenuClose}
                                elevation={0}
                                getContentAnchorEl={null}
                                anchorOrigin={{
                                    vertical: 'bottom',
                                    horizontal: 'right',
                                }}
                            >
                                {
                                    MENU_ITEMS
                                }
                            </Menu>
                            <VcioIcon vcio='ars-angle-down' iconColor={colors.green_500} rem={0.75} width={12} onClick={onMenuOpen}/>
                            <InformationTooltip>
                                Use to:
                                <ul>
                                    <li>View details about the move group members and customize the view</li>
                                    <br/>
                                    <li>Export the list to attach to a work order</li>
                                </ul>
                            </InformationTooltip>
                        </Grid>
                    </Grid>
                </Grid>
                <Grid item xs={12}>
                    {
                        overviewData &&
                        <Grid container style={{ marginBottom: theme.spacing(6) }}>
                            <DataPanelGroup
                                noBorder={true}
                                toolbar={{
                                    showFilter: true,
                                    showTotal: true,
                                    buttons: {
                                        generalDownloadBtn: true
                                    }
                                }}
                                projectName={project.roProjectWithData.name || ''}
                                tabs={[
                                    {
                                        dataId: `${project.roProjectWithData.name}_all_entity_properties`,
                                        data: {
                                            columnDefs: remoteData.columnDefs,
                                            rows
                                        },
                                        agGridOptions,
                                        onGridReady
                                    }
                                ]}
                            />
                        </Grid>
                    }
                </Grid>
            </Grid>
        </>
    );
};
